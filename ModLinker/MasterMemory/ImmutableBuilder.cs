// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using ModLinker;
using System.Collections.Generic;
using System;
using ModLinker.Tables;

namespace ModLinker
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Directory> data)
        {
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new DirectoryTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.FileTable,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void RemoveDirectory(string[] keys)
        {
            var data = RemoveCore(memory.DirectoryTable.GetRawDataUnsafe(), keys, x => x.Path, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new DirectoryTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.FileTable,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void Diff(Directory[] addOrReplaceData)
        {
            var data = DiffCore(memory.DirectoryTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Path, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new DirectoryTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.FileTable,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<File> data)
        {
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new FileTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                table,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void RemoveFile(string[] keys)
        {
            var data = RemoveCore(memory.FileTable.GetRawDataUnsafe(), keys, x => x.Path, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new FileTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                table,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void Diff(File[] addOrReplaceData)
        {
            var data = DiffCore(memory.FileTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Path, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Path, System.StringComparer.Ordinal);
            var table = new FileTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                table,
                memory.ModTable,
                memory.TargetTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Mod> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new ModTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                table,
                memory.TargetTable
            
            );
        }

        public void RemoveMod(Guid[] keys)
        {
            var data = RemoveCore(memory.ModTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<Guid>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new ModTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                table,
                memory.TargetTable
            
            );
        }

        public void Diff(Mod[] addOrReplaceData)
        {
            var data = DiffCore(memory.ModTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<Guid>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<Guid>.Default);
            var table = new ModTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                table,
                memory.TargetTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Target> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new TargetTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                memory.ModTable,
                table
            
            );
        }

        public void RemoveTarget(int[] keys)
        {
            var data = RemoveCore(memory.TargetTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new TargetTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                memory.ModTable,
                table
            
            );
        }

        public void Diff(Target[] addOrReplaceData)
        {
            var data = DiffCore(memory.TargetTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new TargetTable(newData);
            memory = new MemoryDatabase(
                memory.DirectoryTable,
                memory.FileTable,
                memory.ModTable,
                table
            
            );
        }

    }
}